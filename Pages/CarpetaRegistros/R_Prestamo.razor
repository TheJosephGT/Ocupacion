@page "/Prestamo"
@page "/prestamo/{PrestamoId:int}"

@inject PrestamosBLL prestamosBLL
@inject PersonasBLL personasBLL
@inject NotificationService NotificationService

<EditForm Model="prestamo" OnInvalidSubmit="Guardar">
    <div class="card">
        <div class="card-header">
            <h1> Registo Prestamo </h1>
        </div>


        <div class="card-body">
            <div>
                <label>PrestamoId: </label><br>
                <InputNumber @bind-Value="prestamo.PrestamoId" class="form-control" /><br>

                <button type="buttom" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-file" </span>Buscar</button><br>
            </div>

            <div>
                <label>Fecha: </label><br>
                <InputDate @bind-Value="prestamo.Fecha" class="form-control" /><br>
            </div>

            <div>
                <label>Vence: </label><br>
                <InputDate @bind-Value="prestamo.Vence" class="form-control" /><br>
            </div>

            <div>
                <label>PersonaId: </label><br>
                <InputSelect class="form-select" @bind-Value="prestamo.PersonaId">
                    @foreach (var personaExistente in personasBLL.GetList(o => true))
                    {
                        <option value="@personaExistente.PersonaId">@personaExistente.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prestamo.PersonaId)" />
            </div>

            <div>
                <label>Concepto: </label><br>
                <InputText @bind-Value="prestamo.Concepto" class="form-control" /><br>
                <ValidationMessage For="@(() => prestamo.Concepto)" />
            </div>

            <div>
                <label>Monto: </label><br>
                <InputNumber @bind-Value="prestamo.Monto" class="form-control" /><br>
                <ValidationMessage For="@(() => prestamo.Monto)" />
            </div>

            <div>

                <label>Balance: </label><br>
                <InputNumber @bind-Value="prestamo.Balance" class="form-control" /><br>
                <ValidationMessage For="@(() =>prestamo.Balance)" />
            </div>


        </div>

        <div class="model-footer">
            <button type="buttom" class="btn btn-primary" @onclick="Nuevo"><span class="oi oi-file"</span>Nuevo</button>
            <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="oi oi-delete"</span>Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="oi oi-document" </span>Eliminar</button>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

	public Prestamos prestamo { get; set; } = new Prestamos();
    public Personas persona {get; set;} = new Personas();
    protected override void OnInitialized()
    {
        if(PrestamoId > 0){
            this.prestamo.PrestamoId = PrestamoId;
            Buscar();
        }
    }
    
    void Buscar(){
        var prestamoEncontrado = prestamosBLL.Buscar(this.prestamo.PrestamoId);
        if(prestamoEncontrado !=null ){
            this.prestamo = prestamoEncontrado;
        }
        else{
        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ingrese un valor valido."
            }
        );
        }

    }
    void Nuevo(){
        this.prestamo = new Prestamos();
    }
    bool Validar(){
        if(!String.IsNullOrEmpty(prestamo.Concepto)){
            return true;
        }
        return false;
    }
    void Guardar(){
        if(!Validar()){
            return;
        }
        if(prestamosBLL.Guardar(prestamo))
        ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
    }
    void Eliminar(){
        if(prestamosBLL.Eliminar(prestamo.PrestamoId)){
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Se ha eliminado"
            }
        );
        this.Nuevo();
    }
        else{
            ShowNotification(
                new NotificationMessage
                {
                Severity = NotificationSeverity.Error,
                Summary = "No hay elemento para borrar."
                }
            );
            return ;
        }
    }    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}